makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<-NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function () m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
ak <- makeVector$set(3)
ak <- makeVector(3)
ak
ak$get
ak$set
ak$set(2)
ak$set
ak$get
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
a<- makeCacheMatrix()
a$set(matrix(1:9,3,3))
a
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
b <- makeCacheMatrix()
b$set(1:9,3,3)
v
b
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
b<-makeCacheMatrix(matrix(1:9,3,3))
b$get()
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Calculates inverse
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(matrix, ...)
x$setmatrix(m)
m
}
b$get
b$get()
cacheSolve(b)
m<-b$get()
m
solve(m)
## contains a function to set and get the value and inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Calculates inverse
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
b$get()
b<-makeCacheMatrix(matrix(5:8,2,2))
b$get()
cacheSolve(b)
binv <-cacheSolve(b)
b %*% binv
